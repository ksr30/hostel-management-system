/*
 * THIS FILE WAS AUTOGENERATED BY THE DIGITAL ASSET DAML SCALA CODE GENERATOR
 * DO NOT EDIT BY HAND!
 */
import _root_.com.digitalasset.ledger.client.{binding=>$u0020lfdomainapi}
import _root_.com.digitalasset.ledger.api.v1.{value=>$u0020rpcvalue}
package com.digitalasset.quickstart.iou.model {
  package Main {
    final case class Money_Transfer_Contract(issuer: ` lfdomainapi`.Primitive.Party, owner: ` lfdomainapi`.Primitive.Party, money: ` lfdomainapi`.Primitive.Int64, signatories: ` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party]) extends ` lfdomainapi`.Template[Money_Transfer_Contract] {
      override protected[this] def templateCompanion(implicit ` d` : _root_.scala.Predef.DummyImplicit) = Money_Transfer_Contract
    }

    object Money_Transfer_Contract extends ` lfdomainapi`.TemplateCompanion[Money_Transfer_Contract] with _root_.scala.Function4[` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Int64, ` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party], _root_.com.digitalasset.quickstart.iou.model.Main.Money_Transfer_Contract] {
      import _root_.scala.language.higherKinds;
      trait view[` C`[_]] extends ` lfdomainapi`.encoding.RecordView[` C`, view] { $u0020view =>
        val issuer: ` C`[` lfdomainapi`.Primitive.Party];
        val owner: ` C`[` lfdomainapi`.Primitive.Party];
        val money: ` C`[` lfdomainapi`.Primitive.Int64];
        val signatories: ` C`[` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party]];
        final override def hoist[` D`[_]](` f` : _root_.scalaz.~>[` C`, ` D`]): view[` D`] = {
          final class $anon extends _root_.scala.AnyRef with view[` D`] {
            override val issuer = ` f`(` view`.issuer);
            override val owner = ` f`(` view`.owner);
            override val money = ` f`(` view`.money);
            override val signatories = ` f`(` view`.signatories)
          };
          new $anon()
        }
      };
      override val id = ` templateId`(packageId = `Package IDs`.Main, moduleName = "Main", entityName = "Money_Transfer_Contract");
      final implicit class `Money_Transfer_Contract syntax`[+` ExOn`](private val id: ` ExOn`) extends _root_.scala.AnyVal {
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.digitalasset.quickstart.iou.model.DA.Internal.Template.Archive)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Money_Transfer_Contract]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = ` exercise`(id, "Archive", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Money_Transfer_Contract]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = exerciseArchive(actor, _root_.com.digitalasset.quickstart.iou.model.DA.Internal.Template.Archive())
      };
      override val consumingChoices: Set[` lfdomainapi`.Primitive.ChoiceId] = ` lfdomainapi`.Primitive.ChoiceId.subst(Set("Archive"));
      override def toNamedArguments(` self` : Money_Transfer_Contract) = ` arguments`(scala.Tuple2("issuer", ` lfdomainapi`.Value.encode(` self`.issuer)), scala.Tuple2("owner", ` lfdomainapi`.Value.encode(` self`.owner)), scala.Tuple2("money", ` lfdomainapi`.Value.encode(` self`.money)), scala.Tuple2("signatories", ` lfdomainapi`.Value.encode(` self`.signatories)));
      override def fromNamedArguments(` r` : ` rpcvalue`.Record) = if (` r`.fields.length.==(4))
        ` r`.fields(0) match {
          case ` rpcvalue`.RecordField((""| "issuer"), _root_.scala.Some(zv0)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv0) match {
            case _root_.scala.Some(z0) => (` r`.fields(1) match {
              case ` rpcvalue`.RecordField((""| "owner"), _root_.scala.Some(zv1)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv1) match {
                case _root_.scala.Some(z1) => (` r`.fields(2) match {
                  case ` rpcvalue`.RecordField((""| "money"), _root_.scala.Some(zv2)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Int64](zv2) match {
                    case _root_.scala.Some(z2) => (` r`.fields(3) match {
                      case ` rpcvalue`.RecordField((""| "signatories"), _root_.scala.Some(zv3)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party]](zv3) match {
                        case _root_.scala.Some(z3) => Some(Money_Transfer_Contract(z0, z1, z2, z3))
                        case _root_.scala.None => _root_.scala.None
                      })
                      case _ => _root_.scala.None
                    })
                    case _root_.scala.None => _root_.scala.None
                  })
                  case _ => _root_.scala.None
                })
                case _root_.scala.None => _root_.scala.None
              })
              case _ => _root_.scala.None
            })
            case _root_.scala.None => _root_.scala.None
          })
          case _ => _root_.scala.None
        }
      else
        _root_.scala.None;
      override def fieldEncoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding): view[lte.Field] = {
        object `view ` extends view[lte.Field] {
          val issuer = lte.field("issuer", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val owner = lte.field("owner", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val money = lte.field("money", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Int64](lte));
          val signatories = lte.field("signatories", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party]](lte))
        };
        `view `
      };
      override def encoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding)(`view `: view[lte.Field]): lte.Out[_root_.com.digitalasset.quickstart.iou.model.Main.Money_Transfer_Contract] = {
        val `recordFields `: lte.RecordFields[_root_.com.digitalasset.quickstart.iou.model.Main.Money_Transfer_Contract] = lte.RecordFields.xmapN(lte.fields(`view `.issuer), lte.fields(`view `.owner), lte.fields(`view `.money), lte.fields(`view `.signatories))({
          case scala.Tuple4(issuer, owner, money, signatories) => _root_.com.digitalasset.quickstart.iou.model.Main.Money_Transfer_Contract(issuer, owner, money, signatories)
        })({
          case _root_.com.digitalasset.quickstart.iou.model.Main.Money_Transfer_Contract(issuer, owner, money, signatories) => scala.Tuple4(issuer, owner, money, signatories)
        });
        lte.record(` dataTypeId`, `recordFields `)
      }
    }
  }
}
