/*
 * THIS FILE WAS AUTOGENERATED BY THE DIGITAL ASSET DAML SCALA CODE GENERATOR
 * DO NOT EDIT BY HAND!
 */
import _root_.com.digitalasset.ledger.client.{binding=>$u0020lfdomainapi}
import _root_.com.digitalasset.ledger.api.v1.{value=>$u0020rpcvalue}
package com.digitalasset.quickstart.iou.model {
  package Main {
    final case class Confirmation_Aggrement(manager: ` lfdomainapi`.Primitive.Party, food_Provider: ` lfdomainapi`.Primitive.Party, money: ` lfdomainapi`.Primitive.Int64, finalContract: com.digitalasset.quickstart.iou.model.Main.Money_Transfer_Contract, alreadySigned: ` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party]) extends ` lfdomainapi`.Template[Confirmation_Aggrement] {
      override protected[this] def templateCompanion(implicit ` d` : _root_.scala.Predef.DummyImplicit) = Confirmation_Aggrement
    }

    object Confirmation_Aggrement extends ` lfdomainapi`.TemplateCompanion[Confirmation_Aggrement] with _root_.scala.Function5[` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Int64, com.digitalasset.quickstart.iou.model.Main.Money_Transfer_Contract, ` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party], _root_.com.digitalasset.quickstart.iou.model.Main.Confirmation_Aggrement] {
      import _root_.scala.language.higherKinds;
      trait view[` C`[_]] extends ` lfdomainapi`.encoding.RecordView[` C`, view] { $u0020view =>
        val manager: ` C`[` lfdomainapi`.Primitive.Party];
        val food_Provider: ` C`[` lfdomainapi`.Primitive.Party];
        val money: ` C`[` lfdomainapi`.Primitive.Int64];
        val finalContract: ` C`[com.digitalasset.quickstart.iou.model.Main.Money_Transfer_Contract];
        val alreadySigned: ` C`[` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party]];
        final override def hoist[` D`[_]](` f` : _root_.scalaz.~>[` C`, ` D`]): view[` D`] = {
          final class $anon extends _root_.scala.AnyRef with view[` D`] {
            override val manager = ` f`(` view`.manager);
            override val food_Provider = ` f`(` view`.food_Provider);
            override val money = ` f`(` view`.money);
            override val finalContract = ` f`(` view`.finalContract);
            override val alreadySigned = ` f`(` view`.alreadySigned)
          };
          new $anon()
        }
      };
      override val id = ` templateId`(packageId = `Package IDs`.Main, moduleName = "Main", entityName = "Confirmation_Aggrement");
      final implicit class `Confirmation_Aggrement syntax`[+` ExOn`](private val id: ` ExOn`) extends _root_.scala.AnyVal {
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.digitalasset.quickstart.iou.model.DA.Internal.Template.Archive)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Confirmation_Aggrement]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = ` exercise`(id, "Archive", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Confirmation_Aggrement]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = exerciseArchive(actor, _root_.com.digitalasset.quickstart.iou.model.DA.Internal.Template.Archive());
        def exerciseDoPay(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.digitalasset.quickstart.iou.model.Main.DoPay)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Confirmation_Aggrement]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.digitalasset.quickstart.iou.model.Main.Money_Transfer_Contract]] = ` exercise`(id, "DoPay", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseDoPay(actor: ` lfdomainapi`.Primitive.Party, newMoney: ` lfdomainapi`.Primitive.Int64)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Confirmation_Aggrement]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.digitalasset.quickstart.iou.model.Main.Money_Transfer_Contract]] = exerciseDoPay(actor, _root_.com.digitalasset.quickstart.iou.model.Main.DoPay(newMoney));
        def exerciseSign(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.digitalasset.quickstart.iou.model.Main.Sign)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Confirmation_Aggrement]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.digitalasset.quickstart.iou.model.Main.Confirmation_Aggrement]] = ` exercise`(id, "Sign", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseSign(actor: ` lfdomainapi`.Primitive.Party, signer: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Confirmation_Aggrement]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.digitalasset.quickstart.iou.model.Main.Confirmation_Aggrement]] = exerciseSign(actor, _root_.com.digitalasset.quickstart.iou.model.Main.Sign(signer))
      };
      override val consumingChoices: Set[` lfdomainapi`.Primitive.ChoiceId] = ` lfdomainapi`.Primitive.ChoiceId.subst(Set("Archive", "DoPay", "Sign"));
      override def toNamedArguments(` self` : Confirmation_Aggrement) = ` arguments`(scala.Tuple2("manager", ` lfdomainapi`.Value.encode(` self`.manager)), scala.Tuple2("food_Provider", ` lfdomainapi`.Value.encode(` self`.food_Provider)), scala.Tuple2("money", ` lfdomainapi`.Value.encode(` self`.money)), scala.Tuple2("finalContract", ` lfdomainapi`.Value.encode(` self`.finalContract)), scala.Tuple2("alreadySigned", ` lfdomainapi`.Value.encode(` self`.alreadySigned)));
      override def fromNamedArguments(` r` : ` rpcvalue`.Record) = if (` r`.fields.length.==(5))
        ` r`.fields(0) match {
          case ` rpcvalue`.RecordField((""| "manager"), _root_.scala.Some(zv0)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv0) match {
            case _root_.scala.Some(z0) => (` r`.fields(1) match {
              case ` rpcvalue`.RecordField((""| "food_Provider"), _root_.scala.Some(zv1)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv1) match {
                case _root_.scala.Some(z1) => (` r`.fields(2) match {
                  case ` rpcvalue`.RecordField((""| "money"), _root_.scala.Some(zv2)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Int64](zv2) match {
                    case _root_.scala.Some(z2) => (` r`.fields(3) match {
                      case ` rpcvalue`.RecordField((""| "finalContract"), _root_.scala.Some(zv3)) => (` lfdomainapi`.Value.decode[com.digitalasset.quickstart.iou.model.Main.Money_Transfer_Contract](zv3) match {
                        case _root_.scala.Some(z3) => (` r`.fields(4) match {
                          case ` rpcvalue`.RecordField((""| "alreadySigned"), _root_.scala.Some(zv4)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party]](zv4) match {
                            case _root_.scala.Some(z4) => Some(Confirmation_Aggrement(z0, z1, z2, z3, z4))
                            case _root_.scala.None => _root_.scala.None
                          })
                          case _ => _root_.scala.None
                        })
                        case _root_.scala.None => _root_.scala.None
                      })
                      case _ => _root_.scala.None
                    })
                    case _root_.scala.None => _root_.scala.None
                  })
                  case _ => _root_.scala.None
                })
                case _root_.scala.None => _root_.scala.None
              })
              case _ => _root_.scala.None
            })
            case _root_.scala.None => _root_.scala.None
          })
          case _ => _root_.scala.None
        }
      else
        _root_.scala.None;
      override def fieldEncoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding): view[lte.Field] = {
        object `view ` extends view[lte.Field] {
          val manager = lte.field("manager", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val food_Provider = lte.field("food_Provider", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val money = lte.field("money", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Int64](lte));
          val finalContract = lte.field("finalContract", ` lfdomainapi`.encoding.LfEncodable.encoding[com.digitalasset.quickstart.iou.model.Main.Money_Transfer_Contract](lte));
          val alreadySigned = lte.field("alreadySigned", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party]](lte))
        };
        `view `
      };
      override def encoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding)(`view `: view[lte.Field]): lte.Out[_root_.com.digitalasset.quickstart.iou.model.Main.Confirmation_Aggrement] = {
        val `recordFields `: lte.RecordFields[_root_.com.digitalasset.quickstart.iou.model.Main.Confirmation_Aggrement] = lte.RecordFields.xmapN(lte.fields(`view `.manager), lte.fields(`view `.food_Provider), lte.fields(`view `.money), lte.fields(`view `.finalContract), lte.fields(`view `.alreadySigned))({
          case scala.Tuple5(manager, food_Provider, money, finalContract, alreadySigned) => _root_.com.digitalasset.quickstart.iou.model.Main.Confirmation_Aggrement(manager, food_Provider, money, finalContract, alreadySigned)
        })({
          case _root_.com.digitalasset.quickstart.iou.model.Main.Confirmation_Aggrement(manager, food_Provider, money, finalContract, alreadySigned) => scala.Tuple5(manager, food_Provider, money, finalContract, alreadySigned)
        });
        lte.record(` dataTypeId`, `recordFields `)
      }
    }
  }
}
