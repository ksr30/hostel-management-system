-- Copyright (c) 2020 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0


module Main where

import Utilities
import DA.List


template Money_Transfer_Contract
  with
    issuer : Party
    owner : Party
    money : Int
    signatories: [Party]
    
  where
    signatory signatories
    ensure
      unique signatories
  
template Confirmation_Aggrement
  with
    manager :Party
    food_Provider :Party
    money : Int
    finalContract: Money_Transfer_Contract
    alreadySigned: [Party]
  where
    signatory alreadySigned
    observer finalContract.signatories
    ensure
      
      unique alreadySigned

    
    let toSign = filter (`notElem` alreadySigned) finalContract.signatories

    choice Sign : ContractId Confirmation_Aggrement with
        
        signer : Party
      controller signer
        do
          
          assert (signer `elem` toSign)
          create this with alreadySigned = signer :: alreadySigned

    
    
    
-- Manager can pay to service provider by createting Money_Transfer_Conract,
-- only and only if every party approves Confirmation_Aggrement. 
    controller manager can
      DoPay : ContractId Money_Transfer_Contract
        with newMoney : Int
        do
          assert (sort alreadySigned == sort finalContract.signatories)
          create finalContract with money = newMoney
          
          

test = scenario do
  
  
  parties@[hostler1, hostler2, hostler3, hostler4] <- makePartiesFrom ["Alice", "Bob", "Clare", "Dave"]
  manager <- getParty "Manager"
  food_Provider <- getParty "Food Provider"

  
  let finalContract = Money_Transfer_Contract with issuer = manager; owner = food_Provider  ;money = 0 ;signatories = manager :: parties 

  -- Manager intiates confirmation contract with hostlers as observer 
  confirmation_Aggrement <- manager `submit` do
    create Confirmation_Aggrement with manager; food_Provider = food_Provider; money = 10000 ;finalContract; alreadySigned = [manager]
  
  -- Hostlers approve contract and become part of signatory 
  confirmation_Aggrement <- hostler1 `submit` do
    exercise confirmation_Aggrement Sign with signer = hostler1
  confirmation_Aggrement <- hostler2 `submit` do
    exercise confirmation_Aggrement Sign with signer = hostler2
  confirmation_Aggrement <- hostler3 `submit` do
    exercise confirmation_Aggrement Sign with signer = hostler3
  confirmation_Aggrement <- hostler4 `submit` do
    exercise confirmation_Aggrement Sign with signer = hostler4
  -- Manager can pay to service provider only and only if every party approves contract. 
  manager `submit` do
    exercise confirmation_Aggrement DoPay with newMoney = 10000